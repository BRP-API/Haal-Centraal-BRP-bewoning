/*
 * Bewoning
 *
 * API voor het zoeken en raadplegen van bewoningen en metagegevens over bewoning (verloop). Een bewoning is een adresseerbaar object (verblijfsobject, ligplaats of standplaats) met ingeschreven bewoner(s). Iedere samenstelling van bewoners van het object is een bewoning. Overleden personen maken onderdeel uit van een bewoning tot het moment van overlijden. Gegevens over de bewoners zijn actueel. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Een bewoner is een persoon die op een (verblijfs)object met een adres is ingeschreven of ingeschreven is geweest. * &#x60;datumAanvangAdreshouding&#x60; : Datum waarop de bewoner van dit adresseerbaar object is ingeschreven. * &#x60;datumTot&#x60; : Datum waarop de bewoner van dit adresseerbaar object is uitgeschreven. 
    /// </summary>
    [DataContract(Name = "Bewoner")]
    public partial class Bewoner : IEquatable<Bewoner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bewoner" /> class.
        /// </summary>
        /// <param name="burgerservicenummer">burgerservicenummer.</param>
        /// <param name="datumTot">datumTot.</param>
        /// <param name="datumAanvangAdreshouding">datumAanvangAdreshouding.</param>
        /// <param name="geheimhoudingPersoonsgegevens">Gegevens mogen niet worden verstrekt aan derden / maatschappelijke instellingen. .</param>
        /// <param name="indicatieVerblijfsplaatsInOnderzoek">Geeft aan dat de verblijfplaats in onderzoek is. .</param>
        /// <param name="functieAdres">functieAdres.</param>
        public Bewoner(string burgerservicenummer = default(string), DatumOnvolledig datumTot = default(DatumOnvolledig), DatumOnvolledig datumAanvangAdreshouding = default(DatumOnvolledig), bool geheimhoudingPersoonsgegevens = default(bool), bool indicatieVerblijfsplaatsInOnderzoek = default(bool), SoortAdresEnum functieAdres = default(SoortAdresEnum))
        {
            this.Burgerservicenummer = burgerservicenummer;
            this.DatumTot = datumTot;
            this.DatumAanvangAdreshouding = datumAanvangAdreshouding;
            this.GeheimhoudingPersoonsgegevens = geheimhoudingPersoonsgegevens;
            this.IndicatieVerblijfsplaatsInOnderzoek = indicatieVerblijfsplaatsInOnderzoek;
            this.FunctieAdres = functieAdres;
        }

        /// <summary>
        /// Gets or Sets Burgerservicenummer
        /// </summary>
        [DataMember(Name = "burgerservicenummer", EmitDefaultValue = false)]
        public string Burgerservicenummer { get; set; }

        /// <summary>
        /// Gets or Sets DatumTot
        /// </summary>
        [DataMember(Name = "datumTot", EmitDefaultValue = false)]
        public DatumOnvolledig DatumTot { get; set; }

        /// <summary>
        /// Gets or Sets DatumAanvangAdreshouding
        /// </summary>
        [DataMember(Name = "datumAanvangAdreshouding", EmitDefaultValue = false)]
        public DatumOnvolledig DatumAanvangAdreshouding { get; set; }

        /// <summary>
        /// Gegevens mogen niet worden verstrekt aan derden / maatschappelijke instellingen. 
        /// </summary>
        /// <value>Gegevens mogen niet worden verstrekt aan derden / maatschappelijke instellingen. </value>
        [DataMember(Name = "geheimhoudingPersoonsgegevens", EmitDefaultValue = false)]
        public bool GeheimhoudingPersoonsgegevens { get; set; }

        /// <summary>
        /// Geeft aan dat de verblijfplaats in onderzoek is. 
        /// </summary>
        /// <value>Geeft aan dat de verblijfplaats in onderzoek is. </value>
        [DataMember(Name = "indicatieVerblijfsplaatsInOnderzoek", EmitDefaultValue = false)]
        public bool IndicatieVerblijfsplaatsInOnderzoek { get; set; }

        /// <summary>
        /// Gets or Sets FunctieAdres
        /// </summary>
        [DataMember(Name = "functieAdres", EmitDefaultValue = false)]
        public SoortAdresEnum FunctieAdres { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Bewoner {\n");
            sb.Append("  Burgerservicenummer: ").Append(Burgerservicenummer).Append("\n");
            sb.Append("  DatumTot: ").Append(DatumTot).Append("\n");
            sb.Append("  DatumAanvangAdreshouding: ").Append(DatumAanvangAdreshouding).Append("\n");
            sb.Append("  GeheimhoudingPersoonsgegevens: ").Append(GeheimhoudingPersoonsgegevens).Append("\n");
            sb.Append("  IndicatieVerblijfsplaatsInOnderzoek: ").Append(IndicatieVerblijfsplaatsInOnderzoek).Append("\n");
            sb.Append("  FunctieAdres: ").Append(FunctieAdres).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bewoner);
        }

        /// <summary>
        /// Returns true if Bewoner instances are equal
        /// </summary>
        /// <param name="input">Instance of Bewoner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bewoner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Burgerservicenummer == input.Burgerservicenummer ||
                    (this.Burgerservicenummer != null &&
                    this.Burgerservicenummer.Equals(input.Burgerservicenummer))
                ) && 
                (
                    this.DatumTot == input.DatumTot ||
                    (this.DatumTot != null &&
                    this.DatumTot.Equals(input.DatumTot))
                ) && 
                (
                    this.DatumAanvangAdreshouding == input.DatumAanvangAdreshouding ||
                    (this.DatumAanvangAdreshouding != null &&
                    this.DatumAanvangAdreshouding.Equals(input.DatumAanvangAdreshouding))
                ) && 
                (
                    this.GeheimhoudingPersoonsgegevens == input.GeheimhoudingPersoonsgegevens ||
                    this.GeheimhoudingPersoonsgegevens.Equals(input.GeheimhoudingPersoonsgegevens)
                ) && 
                (
                    this.IndicatieVerblijfsplaatsInOnderzoek == input.IndicatieVerblijfsplaatsInOnderzoek ||
                    this.IndicatieVerblijfsplaatsInOnderzoek.Equals(input.IndicatieVerblijfsplaatsInOnderzoek)
                ) && 
                (
                    this.FunctieAdres == input.FunctieAdres ||
                    (this.FunctieAdres != null &&
                    this.FunctieAdres.Equals(input.FunctieAdres))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Burgerservicenummer != null)
                    hashCode = hashCode * 59 + this.Burgerservicenummer.GetHashCode();
                if (this.DatumTot != null)
                    hashCode = hashCode * 59 + this.DatumTot.GetHashCode();
                if (this.DatumAanvangAdreshouding != null)
                    hashCode = hashCode * 59 + this.DatumAanvangAdreshouding.GetHashCode();
                hashCode = hashCode * 59 + this.GeheimhoudingPersoonsgegevens.GetHashCode();
                hashCode = hashCode * 59 + this.IndicatieVerblijfsplaatsInOnderzoek.GetHashCode();
                if (this.FunctieAdres != null)
                    hashCode = hashCode * 59 + this.FunctieAdres.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
